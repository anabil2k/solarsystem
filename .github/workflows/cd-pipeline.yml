name: Provision EC2 and Deploy with Ansible

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

jobs:
  provision-infrastructure:
    name: Provision Network and EC2 Instances using Terraform
    runs-on: ubuntu-latest
    outputs:
      webserver_eip: ${{ steps.apply.outputs.webserver_eip }}
      monitoring_server_eip: ${{ steps.apply.outputs.monitoring_server_eip }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      WEB_ELASTIC_IP: 

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
           terraform_wrapper: false
#          terraform_version: 1.1.9



      - name: "Configure AWS Credentials" 
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Generate a temporary SSH key to access EC2 instances initially
      #- name: Generate Temporary SSH Key
      #  run: ssh-keygen -t rsa -b 4096 -f ~/.ssh/temp_id_rsa -N ""
      #  run: ssh-keygen -t rsa -b 2048 -f ~/.ssh/temp_id_rsa -N ""
      
      # Initialize Terraform
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./terraform

      # validate Terraform
      - name: Terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate
        working-directory: ./terraform


      # Apply Terraform configuration (including EC2 and Elastic IP creation)
      - name: Terraform Apply
        working-directory: ./terraform
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          TF_VAR_aws-region: ${{ env.AWS_REGION }} 
#          TF_VAR_ssh-public-key: "${{ env.SSH_PUBLIC_KEY }}"
        run: |
          terraform apply -auto-approve -lock=false -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "webserver_eip=$(terraform output -raw webserver_eip)" >> $GITHUB_ENV
          echo "monitoring_server_eip=$(terraform output -raw monitoring_server_eip)" >> $GITHUB_ENV
          echo "webserver_eip=$(terraform output -raw webserver_eip)" >> $GITHUB_OUTPUT
          echo "monitoring_server_eip=$(terraform output -raw monitoring_server_eip)" >> $GITHUB_OUTPUT
#          terraform output -raw monitoring_server_eip

          
      # Save the Elastic IPs as artifacts to use them in the next job
      - name: Save Elastic IPs
        run: |
          echo "WEB SERVER ELASTIC IP: ${{ env.webserver_eip }}"
          echo "PROMETHEUS_ELASTIC_IP: ${{ env.monitoring_server_eip }}"
#          echo "webserver_eip=$(terraform output -json webserver_eip | jq -r .)" >> $GITHUB_ENV
#          echo "monitoring_server_eip=$(terraform output -json monitoring_server_eip | jq -r .)" >> $GITHUB_ENV


 #         echo "WEB_ELASTIC_IP=$(terraform output -json webserver_eip | jq -r .)" >> $GITHUB_ENV
 #         echo "PROMETHEUS_ELASTIC_IP=$(terraform output -json monitoring_server_eip | jq -r .)" >> $GITHUB_ENV
 #         echo "WEB SERVER ELASTIC IP: ${{ env.WEB_ELASTIC_IP }}"
 #         echo "PROMETHEUS_ELASTIC_IP: ${{ env.PROMETHEUS_ELASTIC_IP }}"

  ansible-deploy:
    name: Install and Deploy Configuration using Ansible
    runs-on: ubuntu-latest
    needs: provision-infrastructure

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 1: Create a new user 'ubuntu'
      - name: Create ubuntu user
        run: |
          sudo useradd -m ubuntu -s /bin/bash
          echo "ubuntu ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ubuntu

      # Step 2: Install Ansible and set permissions for the ubuntu user

      # Step 2: Install Ansible using the ubuntu user
      - name: Install Ansible as ubuntu user
        run: |
         sudo -u ubuntu bash -c 'sudo apt update && sudo apt install -y ansible'
      

      # step 3: install ansible galaxy collections as ubuntu user
      - name: install ansible galaxy collections
        run: |
          sudo -u ubuntu bash -c 'ansible-galaxy collection install prometheus.prometheus'
          sudo -u ubuntu bash -c 'ansible-galaxy collection install grafana.grafana'

#        run: ansible-galaxy install -r ./ansible/requirements.yml


      # Step 3: Switch to ubuntu user and generate SSH key
      - name: Generate SSH Key for ubuntu user
        run: |
          sudo -u ubuntu ssh-keygen -t rsa -b 4096 -f /home/ubuntu/.ssh/id_rsa -N ""
          sudo -u ubuntu ls -la /home/ubuntu/.ssh
        # Store the generated public key in the workflow for later use
        id: generate_key

      # Step 4: Save the SSH key as a secret or artifact for future jobs
      - name: Save Public SSH Key for further EC2s distribution
        run: |
          PUBLIC_KEY=$(sudo cat /home/ubuntu/.ssh/id_rsa.pub)
          echo "SSH_PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_ENV


      # Distribute the generated SSH key to the EC2 instances using temporary SSH key
      - name: Distribute SSH Key to WebServer and Prometheus
        run: |
          echo "WEB_ELASTIC_IP= ${{ needs.provision-infrastructure.outputs.webserver_eip }}" >> $GITHUB_ENV
          echo "PROMETHEUS_ELASTIC_IP= ${{ needs.provision-infrastructure.outputs.monitoring_server_eip }}" >> $GITHUB_ENV
          # Use the ubuntu user created earlier to distribute the key to the EC2 instances
          ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/id_rsa ubuntu@${{env.WEB_ELASTIC_IP}} "mkdir -p ~/.ssh && echo '${{ env.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"
          ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/id_rsa ubuntu@$PROMETHEUS_ELASTIC_IP "mkdir -p ~/.ssh && echo '${{ env.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"


#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ needs.provision-infrastructure.outputs.webserver_eip }} "mkdir -p ~/.ssh && echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys"
#          chmod 600 ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa.pub
#          ls -la ~/.ssh
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ needs.provision-infrastructure.outputs.monitoring_server_eip }} "mkdir -p ~/.ssh && echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys"
#          chmod 600 ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa.pub
#          ls -la ~/.ssh
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/temp_id_rsa ubuntu@${{ env.WEB_ELASTIC_IP }} "mkdir -p ~/.ssh && echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys"
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/temp_id_rsa ubuntu@${{ env.PROMETHEUS_ELASTIC_IP }} "mkdir -p ~/.ssh && echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys"


      # Update Ansible inventory to use the newly generated SSH key
      - name: Update Ansible Inventory with Elastic IPs and SSH key
        run: |
          echo "[webserver]" > ./ansible/inventory.ini
          echo "web_instance ansible_host=${{ env.WEB_ELASTIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ./ansible/inventory.ini
          echo "[prometheus]" >> ./ansible/inventory.ini
          echo "prometheus_instance ansible_host=${{ env.PROMETHEUS_ELASTIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ./ansible/inventory.ini

      # check servers' connectivity
      - name: ping servers
        run: ansible all -i inventory.ini -m ping

      # Run Ansible playbook to publish website
      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          inventory: ./ansible/inventory.ini
          playbook: ./ansible/publish-web.yml

      # Run Ansible playbook to install and configure monitoring 
      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          inventory: ./ansible/inventory.ini
          playbook: ./ansible/install-config-monitoring.yml
