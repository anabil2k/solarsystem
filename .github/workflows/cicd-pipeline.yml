name: CI/CD Pipeline for the Solar System
on:
  push:
      branches:
          - main
          - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
  # Cross-Platform Testing
  unit-testing:
      name: unit and Cross-Platform Testing
      strategy:
          matrix:
              nodejs_version: [18,20,21]
              os: [ubuntu-latest,macos-latest]
              exclude:
                  - nodejs_version: 18
                    os: macos-latest
      #runs-on: ubuntu-latest
      runs-on: ${{ matrix.os }}
      steps:
          - name: checkout
            uses: actions/checkout@v4

          - name: ${{ matrix.nodejs_version }}
          #- name: setup Node Js Version 18
            uses: actions/setup-node@v4
            with:
              #node-version: 18
              node-version: ${{ matrix.nodejs_version }}

          - name: install depend.
            run: npm install

          - name: unit testing
            id: nodejs-unit-testing-step
            run: npm test

          - name: Archive test result
#            if: failure() && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success' )
            #if: always()
            uses: actions/upload-artifact@v4
            with:
              name: mocha-test-result
              path: test-results.xml

  code-coverage:
      name: code coverage
      needs: unit-testing
      runs-on: ubuntu-latest

      steps:
          - name: checkout
            uses: actions/checkout@v4

          
          - name: setup Node Js Version 20
            uses: actions/setup-node@v4
            with:
              node-version: 20
              
          - name: install depend.
            run: npm install

          - name: check code coverage
            continue-on-error: true
            run: npm run coverage

          - name: unit testing
            run: npm test

          - name: Archive coverage result
            uses: actions/upload-artifact@v4
            with:
              name: code-coverage-result
              path: coverage        
              retention-days: 5
  docker:
      name: containerization
      needs: [code-coverage, unit-testing]
      runs-on: ubuntu-latest

      steps:
          - name: checkout
            uses: actions/checkout@v4

          - name: docker hub login
            uses: docker/login-action@v3
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}

          - name: build and push
            uses: docker/build-push-action@v5
            with:
              context: .
              push: false
              tags: anabil2k/solar-system:${{ github.sha }}
              #tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          - name: docker image test
            run: |
                  docker images
                  docker run --name solar-system-app -d \
                      -p 3000:3000 \
                      -e MONGO_URI=$MONGO_URI \
                      -e MONGO_USERNAME=$MONGO_USERNAME \
                      -e MONGO_PASSWORD=$MONGO_PASSWORD \
                      anabil2k/solar-system:${{ github.sha }}
                  export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                  echo $IP
                  #docker inspect solar-system-app | grep -i IPAddress
                  echo testing image url using wget
                  wget -q -O - 127.0.0.1:3000/live | grep live
          - name: docker build and push
            uses: docker/build-push-action@v5
            with:
              context: .
              push: true
              tags: anabil2k/solar-system:${{ github.sha }}
              #tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

  provision-infrastructure:
    name: Provision Network and EC2 Instances using Terraform
    needs: docker
    runs-on: ubuntu-latest
    outputs:
      webserver_eip: ${{steps.apply.outputs.webserver_eip}}
      monitoring_server_eip: ${{steps.apply.outputs.monitoring_server_eip}}
      k3s_server_eip: ${{steps.apply.outputs.k3s_server_eip}}
      ec2_private_key_base64: ${{steps.apply.outputs.ec2_private_key_base64}}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      WEB_ELASTIC_IP: 

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
           terraform_wrapper: false

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Initialize Terraform
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init
        working-directory: ./terraform

      # validate Terraform
      - name: Terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate
        working-directory: ./terraform


      # Apply Terraform configuration (including EC2 and Elastic IP creation)
      - name: Terraform Apply
        working-directory: ./terraform
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve -lock=false -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "webserver_eip=$(terraform output -raw webserver_eip)" >> $GITHUB_ENV
          echo "monitoring_server_eip=$(terraform output -raw monitoring_server_eip)" >> $GITHUB_ENV
          echo "k3s_server_eip=$(terraform output -raw k3s_server_eip)" >> $GITHUB_ENV
          echo "#################################"
          echo "webserver_pip=$(terraform output -raw webserver_pip)" >> $GITHUB_ENV
          echo "monitoring_server_pip=$(terraform output -raw monitoring_server_pip)" >> $GITHUB_ENV
          echo "k3s_server_pip=$(terraform output -raw k3s_server_pip)" >> $GITHUB_ENV
          echo "#################################"
          echo "webserver_eip=$(terraform output -raw webserver_eip)" >> $GITHUB_OUTPUT
          echo "monitoring_server_eip=$(terraform output -raw monitoring_server_eip)" >> $GITHUB_OUTPUT
          echo "k3s_server_eip=$(terraform output -raw k3s_server_eip)" >> $GITHUB_OUTPUT
          echo "#################################"
          echo "ec2_private_key_base64=$(terraform output -raw ec2_private_key_base64)" >> $GITHUB_OUTPUT
          echo "ec2_private_key_base64=$(terraform output -raw ec2_private_key_base64)" >> $GITHUB_ENV

          
      # Displaying Elastic IPs
      - name: Displaying Elastic IPs
        run: |
          echo "################## Public IPs ########################"
          echo "WEB_SERVER_ELASTIC_IP: ${{ env.webserver_eip }}"
          echo "PROMETHEUS_ELASTIC_IP: ${{ env.monitoring_server_eip }}"
          echo "k3s_SERVER_ELASTIC_IP: ${{ env.k3s_server_eip }}"
          echo "################## Private IPs ########################"
          echo "WEB_SERVER_PRIVATE_IP: ${{ env.webserver_pip }}"
          echo "PROMETHEUS_PRIVATE_IP: ${{ env.monitoring_server_pip }}"
          echo "k3s_PRIVATE_IP: ${{ env.k3s_server_pip }}"

  ansible-config:
    name: Installation and Configuration using Ansible
    runs-on: ubuntu-latest
    needs: provision-infrastructure

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

        # Step 3: Switch to ubuntu user and generate SSH key
      - name: Generate SSH Key
        run: |
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
            chmod 600 ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa.pub
            ls -la ~/.ssh
            pwd
        id: generate_key

        # Decode the base64-encoded private key and store it in the SSH directory
      - name: Decode and save the private SSH key
        run: |
          echo "${{ needs.provision-infrastructure.outputs.ec2_private_key_base64 }}" | base64 --decode > ~/.ssh/ec2_private_key_pem
          chmod 600 ~/.ssh/ec2_private_key_pem
          ls -la ~/.ssh

      # Install Ansible
      - name: Install Ansible
        run: |
         sudo apt update && sudo apt install -y ansible

      # Install ansible galaxy collections as ubuntu user
      - name: install ansible galaxy collections
        run: |
          ansible-galaxy collection install prometheus.prometheus
          ansible-galaxy collection install grafana.grafana

      # Save the SSH key as a secret or artifact for future jobs
      - name: Save Public SSH Key for further EC2s distribution
        run: |
          PUBLIC_KEY=$(sudo cat ~/.ssh/id_rsa.pub)
          echo "SSH_PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_ENV
          echo "WEB_ELASTIC_IP=${{needs.provision-infrastructure.outputs.webserver_eip}}" >> $GITHUB_ENV
          echo "PROMETHEUS_ELASTIC_IP=${{needs.provision-infrastructure.outputs.monitoring_server_eip}}" >> $GITHUB_ENV
          echo "k3s_ELASTIC_IP=${{needs.provision-infrastructure.outputs.k3s_server_eip}}" >> $GITHUB_ENV

      - name: Distribute SSH Key to WebServer and Prometheus
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key_pem ubuntu@${{ env.WEB_ELASTIC_IP }} "mkdir -p ~/.ssh && echo '${{ env.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key_pem ubuntu@${{ env.PROMETHEUS_ELASTIC_IP }} "mkdir -p ~/.ssh && echo '${{ env.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key_pem ubuntu@${{ env.k3s_ELASTIC_IP }} "mkdir -p ~/.ssh && echo '${{ env.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"
          ls -la ~/.ssh

      # Update Ansible inventory to use the newly generated SSH key
      - name: Update Ansible Inventory file with Elastic IPs and SSH key
        working-directory: ./ansible
        run: |
          pwd
          ls -la
          echo "[webserver]" >> inventory.ini
          echo "web_instance ansible_host=${{ env.WEB_ELASTIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          echo "[prometheus]" >> inventory.ini
          echo "prometheus_instance ansible_host=${{ env.PROMETHEUS_ELASTIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          echo "[k3s]" >> inventory.ini
          echo "k3s_instance ansible_host=${{ env.k3s_ELASTIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          cat inventory.ini

      # check servers' connectivity
      - name: ping servers
        working-directory: ./ansible
        run: ansible all -i inventory.ini -m ping
        
      - name: Run Ansible Playbook to publish a website
        run: |
          chmod 644 index.html
          ansible-playbook  -i ./ansible/inventory.ini ./ansible/publish-web.yml

      # Run Ansible playbook to install and configure monitoring 
      - name:  Run Ansible playbook to install and configure monitoring 
        run: ansible-playbook  -i ./ansible/inventory.ini ./ansible/install-config-monitoring.yml

      # Run Ansible playbook to install and configure kubernetes
      - name: Run Ansible playbook to install and configure kubernetes
        run: ansible-playbook  -i ./ansible/inventory.ini ./ansible/playbook_k3s.yml

      # Run Ansible playbook to deploy a dockerized app to staging environment on kubernetes 
      - name: Run Ansible playbook to deploy a dockerized app to staging environment on kubernetes
        run: |
          ansible-playbook  -i ./ansible/inventory.ini ./ansible/deploy-app-to-staging-k3s.yml
          
      # Run Ansible playbook to deploy a dockerized app to Production environment on kubernetes
      - name: Run Ansible playbook to deploy a dockerized app to Production environment on kubernetes
        run: |
          ansible-playbook  -i ./ansible/inventory.ini ./ansible/deploy-app-to-production-k3s.yml

      - name: quick look to kubernetes cluster resources in the Staging namespace 
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key_pem ubuntu@${{ env.k3s_ELASTIC_IP }} "kubectl get all -n staging-ns"

      - name: quick look to kubernetes cluster resources in the Production namespace 
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key_pem ubuntu@${{ env.k3s_ELASTIC_IP }} "kubectl get all -n pord-ns"
          
      - name: Sleeping for 10 Minutes
        run: sleep 600s
        shell: bash

      - name:  check promethus
        run: curl ${{ env.PROMETHEUS_ELASTIC_IP }}:9090
     
      - name:  check grafana 
        run: curl ${{ env.PROMETHEUS_ELASTIC_IP }}:3000

      - name:  check website
        run: curl ${{ env.WEB_ELASTIC_IP }}

  
      - name:  check  the app published to the Kubernetes Production Environment
        run: curl ${{ env.k3s_ELASTIC_IP }}/live

      - name:  check the app published to the Kubernetes Staging Environment
        run: curl ${{ env.k3s_ELASTIC_IP }}:3001/ready